// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  uid             String        @id
  name            String
  email           String        @db.VarChar(255)
  thumbnail       String?
  contact_details Json?
  enrollments     enrollments[]
  courses         courses[]
  progress        progress[]
  quiz_score      quiz_score[]
}

model courses {
  id          Int            @id @default(autoincrement())
  title       String
  enabled     Boolean        @default(true)
  thumbnail   String?
  creator_id  String
  creator     users          @relation(fields: [creator_id], references: [uid], onDelete: Cascade)
  topics      topics[]
  course_tags courses_tags[]
  enrollments enrollments[]
}

model tags {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  course_tags courses_tags[]
}

model courses_tags {
  id        Int     @id @default(autoincrement())
  course    courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id Int
  tag       tags    @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id    Int

  @@unique([course_id, tag_id])
}

model topics {
  id        Int       @id @default(autoincrement())
  course_id Int
  title     String
  course    courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  quizzes   quizzes[]
  content   content[]
}

model content {
  id             Int          @id @default(autoincrement())
  title          String
  type           content_type
  content        String?
  topic          topics       @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  topic_id       Int
  topic_position Int
  progress       progress[]
}

enum content_type {
  TEXT
  VIDEO
}

model quizzes {
  id             Int          @id @default(autoincrement())
  topic_id       Int
  title          String
  topic          topics       @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  questions      questions[]
  topic_position Int
  quiz_score     quiz_score[]
}

model questions {
  id            Int       @id @default(autoincrement())
  quiz_id       Int
  question_text String
  explanation   String?
  quiz          quizzes   @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  choices       choices[]
}

model choices {
  id          Int       @id @default(autoincrement())
  question_id Int
  choice_text String
  is_correct  Boolean   @default(false)
  question    questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model enrollments {
  id         Int          @id @default(autoincrement())
  user_id    String
  course_id  Int
  user       users        @relation(fields: [user_id], references: [uid], onDelete: Cascade)
  course     courses      @relation(fields: [course_id], references: [id], onDelete: Cascade)
  progress   progress[]
  quiz_score quiz_score[]

  @@unique([user_id, course_id])
}

model progress {
  id            Int         @id @default(autoincrement())
  enrollment_id Int
  enrollment    enrollments @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)
  content_id    Int
  content       content     @relation(fields: [content_id], references: [id], onDelete: Cascade)
  user_id       String
  user          users       @relation(fields: [user_id], references: [uid], onDelete: Cascade)
}

model quiz_score {
  id            Int         @id @default(autoincrement())
  enrollment_id Int
  score         Int
  total_marks   Int
  enrollment    enrollments @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)
  quiz_id       Int
  quiz          quizzes     @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  user_id       String
  user          users       @relation(fields: [user_id], references: [uid], onDelete: Cascade)

  @@unique([user_id, quiz_id])
}
